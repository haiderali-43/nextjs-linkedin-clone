// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Define the User model
model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  password       String
  profilePicture String?
  headline       String?
  summary        String?
  skills         String[]
  education      String?
  experience     String?
  certifications String?
  connections    User[]          @relation("UserConnections", references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  User           User?           @relation(fields: [userId], references: [id])
  userId         Int?
  Connections    Connections[]
  JobPostings    JobPostings[]
  Messages       Messages[]
  Notifications  Notifications[]
}

// Define the Connections model
model Connections {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("UserConnections", fields: [userId1], references: [id])
  userId1   Int
  user2     User     @relation("UserConnections", fields: [userId2], references: [id])
  userId2   Int
  status    String // e.g., "Pending", "Accepted", "Rejected"
  createdAt DateTime @default(now())
}

// Define the JobPostings model
model JobPostings {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  title        String
  company      String
  location     String
  description  String
  requirements String
  salary       Int?
  datePosted   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Define the Messages model
model Messages {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  receiverId Int
  content    String
  timestamp  DateTime @default(now())
}

// Define the Notifications model
model Notifications {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  timestamp DateTime @default(now())
  status    String // e.g., "Read", "Unread"
}
